# file      : %O はデフォルトの出力名
# fill      : yes の場合 0 で埋める
# define    : yes の場合 3 つのシンボルを作成
MEMORY {
#RAM Addresses:
    # Zero page
    ZP: start = $00, size = $100, type = rw, define = yes;
	#note, the c compiler + neslib + famitone2 use about 60 zp addresses, I think
	
	#note OAM: start = $0200, size = $0100, define = yes;
	#note, sprites stored here in the RAM
	
	RAM: start = $0300, size = $0400, define = yes;
	#note VRAM_BUFFER: start = $700, size = 128, define = yes;
#INES Header:
    HEADER: start = $0, size = $10, file = %O ,fill = yes;
#ROM Addresses:
    PRG: start = $8000, size = $8000, file = %O ,fill = yes, define = yes;
#1 Bank of 8K CHR ROM
    CHR: start = $0000, size = $2000, file = %O, fill = yes;
}

# load      : 配置するメモリ領域
# type      : bss 未初期化領域, zp ゼロページ
# define    : yes の場合 3 つのシンボルを作成
# optional  : yes の場合 セグメントを使用するオブジェクトファイルが見つからない場合の警告を抑制

# HEADER    : ヘッダ格納位置 0x0000
# STARTUP   : プログラムアドレス 0x8000
# CODE      : プログラムコード
# RODATA    : 定数データ(const)
# DATA      : 初期化済データ
# BSS       : 未初期化データ
# ZEROPAGE  : ランタイム用
# VECTORS   : 割り込み
SEGMENTS {
    HEADER:   load = HEADER,         type = ro;
    STARTUP:  load = PRG,            type = ro,  define = yes;
    LOWCODE:  load = PRG,            type = ro,                optional = yes;
    INIT:     load = PRG,            type = ro,  define = yes, optional = yes;
    CODE:     load = PRG,            type = ro,  define = yes;
    RODATA:   load = PRG,            type = ro,  define = yes;
    DATA:     load = PRG, run = RAM, type = rw,  define = yes;
    BSS:      load = RAM,            type = bss, define = yes;
    HEAP:     load = RAM,            type = bss, optional = yes;
    ZEROPAGE: load = ZP,             type = zp;
    ONCE:     load = PRG,            type = ro,  define = yes, optional = yes;
	
	SAMPLES:  load = PRG, start = $f000, type = ro, optional = yes;
	VECTORS:  load = PRG, start = $fffa, type = ro;

    #CHARS:    load = CHR,            type = rw;
}

#removed CONDES features

SYMBOLS {

    __STACKSIZE__: type = weak, value = $0100;     # 1 page stack
	__STACK_START__: type = weak, value = $0700;
	
	NES_MAPPER:	  type = weak, value = 0; 			# mapper number, 0 = NROM
	NES_PRG_BANKS:	 type = weak,  value = 2; 			# number of 16K PRG banks, change to 2 for NROM256
	NES_CHR_BANKS:	  type = weak, value = 1; 			# number of 8K CHR banks
	NES_MIRRORING:	  type = weak, value = 1; 			# 0 horizontal, 1 vertical, 8 four screen
	
}

FEATURES {
    CONDES: 
        segment = INIT,
	    type = constructor,
	    label = __CONSTRUCTOR_TABLE__,
	    count = __CONSTRUCTOR_COUNT__;
    CONDES:
        segment = RODATA,
	    type = destructor,
	    label = __DESTRUCTOR_TABLE__,
	    count = __DESTRUCTOR_COUNT__;
    CONDES: 
        segment = RODATA,
        type = interruptor,
        label = __INTERRUPTOR_TABLE__,
        count = __INTERRUPTOR_COUNT__;
}