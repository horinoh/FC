# MMC3 (スーパーマリオ2, 3等)
#   バンク
#     PRG(～512KB = 0x2000 * 64)
#       [0x80000, 0xbfff] 切替え可能
#       [0xc0000, 0xffff] 固定
#     CHAR(～256KB = 0x400 * 256) 
#   ミラーリングを切替え可能
#   WRAM [0x6000, 0x7fff] バッテリーバックアップ
#	IRQ スキャンラインカウンタ
MEMORY {
  ZP: start = $00, size = $100, type = rw, define = yes;	
	RAM: start = $0300, size = $0400, define = yes;	
  HEADER: start = $0, size = $10, file = %O ,fill = yes;

	WRAM: start = $6000, size = $2000, define = yes;

    PRG: start = $C000, size = $4000, file = %O ,fill = yes, define = yes; # Fixed

    CHR: start = $0000, size = $20000, file = %O, fill = yes;
}

SEGMENTS {
    HEADER:   load = HEADER,         type = ro;
    LOWCODE:  load = PRG,            type = ro,                optional = yes;
    INIT:     load = PRG,            type = ro,  define = yes, optional = yes;
    CODE:     load = PRG,            type = ro,  define = yes;
    RODATA:   load = PRG,            type = ro,  define = yes;
    DATA:     load = PRG, run = RAM, type = rw,  define = yes;
    BSS:      load = RAM,            type = bss, define = yes;
    HEAP:     load = RAM,            type = bss, optional = yes;
    ZEROPAGE: load = ZP,             type = zp;
    ONCE:     load = PRG,            type = ro,  define = yes;
	
    STARTUP:  load = PRG,            type = ro,  define = yes;

 #   XRAM:	  load = WRAM,			 type = bss, define = yes;

	VECTORS:  load = PRG, start = $fffa, type = ro;

    CHARS:    load = CHR, type = rw, optional = yes;
}

SYMBOLS {
    __STACKSIZE__: type = weak, value = $0100;     
	__STACK_START__: type = weak, value = $0700;
	
	NES_MAPPER:	  type = weak, value = 4; 			# 4 = MMC3 (TXROM)
	NES_PRG_BANKS:	 type = weak,  value = 1; 		# 16K PRG バンクの個数 16 * 1 = 16K	
	NES_CHR_BANKS:	  type = weak, value = 1; 		# 8K CHR バンクの個数  8 * 1 = 8K (0 にすると CHAR RAM になる)
	NES_MIRRORING:	  type = weak, value = 0;	
}

FEATURES {
    CONDES: 
        segment = INIT,
        type = constructor,
        label = __CONSTRUCTOR_TABLE__,
        count = __CONSTRUCTOR_COUNT__;
    CONDES: 
        segment = RODATA,
        type = destructor,
        label = __DESTRUCTOR_TABLE__,
        count = __DESTRUCTOR_COUNT__;
    CONDES: 
        type = interruptor,
        segment = RODATA,
        label = __INTERRUPTOR_TABLE__,
        count = __INTERRUPTOR_COUNT__;
}
