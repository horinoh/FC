MEMORY {
    ZP: start = $00, size = $100, type = rw, define = yes;
	#note, the c compiler + neslib + famitone2 use about 60 zp addresses, I think

	#STACK: start = $0100, size = $01ff, type = rw, define = yes;

    #note OAM: start = $0200, size = $0100, define = yes;
	#note, sprites stored here in the RAM
	RAM: start = $0300, size = $0400, define = yes;
    #note VRAM_BUFFER: start = $700, size = 128, define = yes;

    HEADER: start = $0, size = $10, file = %O, fill = yes;

#ROM Addresses:
    # PRG0: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
	# PRG1: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
	# PRG2: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
	# PRG3: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
	# PRG4: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
	# PRG5: start = $A000, size = $2000, file = %O ,fill = yes, define = yes;
	# PRG6: start = $C000, size = $2000, file = %O ,fill = yes, define = yes;

    # CHR0:	start = $0000, size = $2000, define = yes;
	# CHR1:	start = $0000, size = $2000, define = yes;
	# CHR2:	start = $0000, size = $2000, define = yes;
	# CHR3:	start = $0000, size = $2000, define = yes;
	# CHR4:	start = $0000, size = $2000, define = yes;
	# CHR5:	start = $0000, size = $2000, define = yes;
	# CHR6:	start = $0000, size = $2000, define = yes;
	# CHR7:	start = $0000, size = $2000, define = yes;

    PRG: start = $8000, size = $8000, file = %O, fill = yes, define = yes;
    #PRG: start = $a000, size = $4000, file = %O ,fill = yes, define = yes;
	#PRG15: start = $e000, size = $2000, file = %O ,fill = yes, define = yes;

    #CHR: start = $0000, size = $2000, file = %O, fill = yes; # 1 Bank of 8K CHR ROM
    CHR: start = $0000, size = $20000, file = %O, fill = yes; # 16 Banks of 8K CHR ROM

    SRAM: start = $6000, size = $2000, type = rw, define = yes;
}

SEGMENTS {
    HEADER:   load = HEADER,         type = ro;    
    BSS:      load = RAM,            type = bss, define = yes;
    HEAP:     load = RAM,            type = bss, optional = yes;
    ZEROPAGE: load = ZP,             type = zp;
    
    DATA:     load = PRG, run = RAM, type = rw,  define = yes;
    ONCE:     load = PRG,            type = ro,  define = yes, optional = yes;
    LOWCODE:  load = PRG,            type = ro,                optional = yes;
    INIT:     load = PRG,            type = ro,  define = yes, optional = yes;
    CODE:     load = PRG,            type = ro,  define = yes;

    #STARTUP:  load = PRG15,          type = ro, define = yes;
    STARTUP:  load = PRG, start = $c000, type = ro,  define = yes;
    RODATA:   load = PRG, type = ro,  define = yes;
	
    # BANK0:		load = PRG0,		type = ro,	define = yes;
	# BANK1:		load = PRG1,		type = ro,	define = yes;
	# BANK2:		load = PRG2,		type = ro,	define = yes;
	# BANK3:		load = PRG3,		type = ro,	define = yes;
	# BANK4:		load = PRG4,		type = ro,	define = yes;
	# BANK5:		load = PRG5,		type = ro,	define = yes;
	# BANK6:		load = PRG6,		type = ro,	define = yes;

    # CHAR0:		load = CHR0,	type = rw;
	# CHAR1:		load = CHR1,	type = rw;
	# CHAR2:		load = CHR2,	type = rw;
	# CHAR3:		load = CHR3,	type = rw;
	# CHAR4:		load = CHR4,	type = rw;
	# CHAR5:		load = CHR5,	type = rw;
	# CHAR6:		load = CHR6,	type = rw;
	# CHAR7:		load = CHR7,	type = rw;

  XRAM:	  load = SRAM,			 type = bss, define = yes;

	#VECTORS:  load = PRG15, start = $fffa, type = ro; # [0xfffa, 0xffff]
    VECTORS:  load = PRG, start = $fffa, type = ro; # [0xfffa, 0xffff]

    CHARS:    load = CHR,            type = rw, optional = yes;
}

SYMBOLS {
  __STACKSIZE__: type = weak, value = $0100;     # 1 page stack
	__STACK_START__: type = weak, value = $0700;
	
  NES_MAPPER:	  type = weak, value = 4; 			    # 4 = MMC3
	NES_PRG_BANKS:	 type = weak,  value = 2; 			# 16K PRG バンクの個数 16 * 2 = 32K
#	NES_PRG_BANKS:	 type = weak,  value = 4; 			
#	NES_CHR_BANKS:	  type = weak, value = 1; 			
	NES_CHR_BANKS:	  type = weak, value = 8;           # 8K CHR バンクの個数, 8 * 8 = 64K
	NES_MIRRORING:	  type = weak, value = 1; 			# 0 = Horizontal, 1 = Vertical, 8 = Four screen
}

FEATURES {
    CONDES: 
      segment = INIT,
	    type = constructor,
	    label = __CONSTRUCTOR_TABLE__,
	    count = __CONSTRUCTOR_COUNT__;
    CONDES:
        segment = RODATA,
	    type = destructor,
	    label = __DESTRUCTOR_TABLE__,
	    count = __DESTRUCTOR_COUNT__;
    CONDES: 
        segment = RODATA,
        type = interruptor,
        label = __INTERRUPTOR_TABLE__,
        count = __INTERRUPTOR_COUNT__;
}