### メモリマップ
# start, size   : 開始アドレス、サイズ
# file          : %O はデフォルトの出力名
# fill          : yes の場合 0 で埋める
# define        : yes の場合 3 つのシンボルを作成 __XXX_START__, __XXX_SIZE__, __XXX_LAST__
MEMORY {
    ZP: start = $00, size = $100, type = rw, define = yes;	
	RAM: start = $0300, size = $0400, define = yes;
    HEADER: start = $0, size = $10, file = %O ,fill = yes;
    PRG: start = $8000, size = $8000, file = %O ,fill = yes, define = yes;
    CHR: start = $0000, size = $2000, file = %O, fill = yes;
}

### セグメント
# load      : 配置するメモリ領域
# run       : スタートアップ時にこのアドレスにコピーされる
# type      : ro 読, rw 読書, bss 未初期化領域, zp ゼロページ
# define    : yes の場合 3 つのシンボルを作成 __XXX_LOAD__, __XXX_RUN__, __XXX_SIZE__
# optional  : yes の場合 セグメントを使用するオブジェクトファイルが見つからない場合の警告を抑制
#
# セグメント名 C から #pragma で変更可能
# HEADER    : ヘッダ格納位置 (0x0000)
# STARTUP   : プログラムスタート位置 (0x8000)
# CODE      : プログラムコード
# RODATA    : 定数データ(const)
# DATA      : 初期化済データ
# BSS       : 未初期化データ
# ZEROPAGE  : ランタイム、レジスタ
# VECTORS   : 割り込み
SEGMENTS {
    HEADER:   load = HEADER,         type = ro;
    STARTUP:  load = PRG,            type = ro,  define = yes;
    LOWCODE:  load = PRG,            type = ro,                optional = yes;
    INIT:     load = PRG,            type = ro,  define = yes, optional = yes;
    CODE:     load = PRG,            type = ro,  define = yes;
    RODATA:   load = PRG,            type = ro,  define = yes;
    DATA:     load = PRG, run = RAM, type = rw,  define = yes;
    BSS:      load = RAM,            type = bss, define = yes;
    HEAP:     load = RAM,            type = bss, optional = yes;
    ZEROPAGE: load = ZP,             type = zp;
    ONCE:     load = PRG,            type = ro,  define = yes, optional = yes;
	
    VECTORS:  load = PRG, start = $fffa, type = ro;
    CHARS:    load = CHR,            type = rw, optional = yes;
}

SYMBOLS {
    __STACKSIZE__: type = weak, value = $0100; 
	__STACK_START__: type = weak, value = $0700;
	
	NES_MAPPER:	  type = weak, value = 0;       # 0 = NROM
	NES_PRG_BANKS:	 type = weak,  value = 2;   # 16K PRG バンクの個数 16 * 2 = 32K
	NES_CHR_BANKS:	  type = weak, value = 1;   # 8K CHR バンクの個数, 8 * 1 = 8K
	NES_MIRRORING:	  type = weak, value = 1;   # 0 = Horizontal, 1 = Vertical, 8 = Four screen
	
}

FEATURES {
    CONDES: 
      segment = INIT,
	    type = constructor,
	    label = __CONSTRUCTOR_TABLE__,
	    count = __CONSTRUCTOR_COUNT__;
    CONDES:
      segment = RODATA,
	    type = destructor,
	    label = __DESTRUCTOR_TABLE__,
	    count = __DESTRUCTOR_COUNT__;
    CONDES: 
      segment = RODATA,
      type = interruptor,
      label = __INTERRUPTOR_TABLE__,
      count = __INTERRUPTOR_COUNT__;
}