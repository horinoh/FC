MEMORY {
    ZP: start = $00, size = $100, type = rw, define = yes;
	RAM: start = $0300, size = $0400, define = yes;
    HEADER: start = $0, size = $10, file = %O ,fill = yes;

    PRG: start = $8000, size = $8000, file = %O ,fill = yes, define = yes;

    CHR: start = $0000, size = $8000, file = %O, fill = yes;
}

SEGMENTS {
    HEADER:   load = HEADER,         type = ro;
    STARTUP:  load = PRG,            type = ro,  define = yes;
    LOWCODE:  load = PRG,            type = ro,                optional = yes;
    INIT:     load = PRG,            type = ro,  define = yes, optional = yes;
    CODE:     load = PRG,            type = ro,  define = yes;
    RODATA:   load = PRG,            type = ro,  define = yes;
    DATA:     load = PRG, run = RAM, type = rw,  define = yes;
    BSS:      load = RAM,            type = bss, define = yes;
    HEAP:     load = RAM,            type = bss, optional = yes;
    ZEROPAGE: load = ZP,             type = zp;
    ONCE:     load = PRG,            type = ro,  define = yes, optional = yes;
	
    VECTORS:  load = PRG, start = $fffa, type = ro;

    CHARS:    load = CHR,            type = rw, optional = yes;
}

SYMBOLS {
    __STACKSIZE__: type = weak, value = $0100;     
	__STACK_START__: type = weak, value = $0700;
	
	NES_MAPPER:	  type = weak, value = 3; 			# 3 = CNROM
	NES_PRG_BANKS:	 type = weak,  value = 2; 		# 16K PRG バンクの個数 16 * 2 = 32K	
	NES_CHR_BANKS:	  type = weak, value = 4; 		# 8K CHR バンクの個数, 8 * 4 = 32K
	NES_MIRRORING:	  type = weak, value = 1; 			
}

FEATURES {
    CONDES: 
        segment = INIT,
        type = constructor,
        label = __CONSTRUCTOR_TABLE__,
        count = __CONSTRUCTOR_COUNT__;
    CONDES: 
        segment = RODATA,
        type = destructor,
        label = __DESTRUCTOR_TABLE__,
        count = __DESTRUCTOR_COUNT__;
    CONDES: 
        type = interruptor,
        segment = RODATA,
        label = __INTERRUPTOR_TABLE__,
        count = __INTERRUPTOR_COUNT__;
}
